version: '3'

services:
  tbotui:
#    image: marolok/telegram-bot-ui:1.9.2
    build:
      context: TBotUI
      dockerfile: Dockerfile
    depends_on:
      - tbotconf
      - tbotdb
      - tbot
    env_file:
      - .env
    volumes:
      - "${LOCAL_PC_MOUNT_DIR}/tbot:/opt/app/temp/"
    tty: true
    restart: always
    networks:
      - bridge
    ports:
      - '8080:8080'
    deploy:
      mode: replicated
      replicas: 1
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 10s
      timeout: 10s
      retries: 5

  tbot:
#    image: marolok/telegram_bot:2.6.0
    build:
      context: TBotWorker
      dockerfile: Dockerfile
    depends_on:
      - tbotconf
      - tbotdb
    volumes:
      - "${LOCAL_PC_MOUNT_DIR}/tbot:/opt/app/temp/"
    tty: true
    restart: always
    environment:
      BOT_PROFILE: image
    networks:
      - bridge
    deploy:
      mode: replicated
      replicas: 1
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 10s
      timeout: 10s
      retries: 5

  tbotdb:
#    image: marolok/telegram_db:2.4.1
    build:
      context: TBotDB
      dockerfile: Dockerfile
    depends_on:
      - tbotconf
      - pgsql
    tty: true
    environment:
      BOT_PROFILE: image
      SPRING_CLOUD_CONFIG_SERVER: 'configserver:http://tbotconf:8888'
    restart: always
    networks:
      - bridge
      - pgnet
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/actuator/health" ]
      interval: 10s
      timeout: 10s
      retries: 5

  pgsql:
    image: postgres:14-alpine
    tty: true
    restart: always
    env_file:
      - .env
    ports:
      - '5432:5432'
    networks:
      - pgnet
    volumes:
      - "${LOCAL_PC_MOUNT_DIR}/db:/var/lib/postgresql/data"
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'" ]
      interval: 10s
      timeout: 3s
      retries: 3
  adminer:
    image: adminer
    restart: always
    networks:
      - pgnet
    ports:
      - 8081:8080

  tbotconf:
    image: marolok/telegram_conf:1.2.0
    environment:
      GIT_URL: 'git@github.com:PavelBocharov/TelegramConf.git'
      PRIVATE_KEY: |
        -----BEGIN RSA PRIVATE KEY-----
        *******************************
        -----END RSA PRIVATE KEY-----

    tty: true
    restart: always
    networks:
      - bridge
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888/actuator/health" ]
      interval: 10s
      timeout: 10s
      retries: 5

volumes:
  cache:
    driver: local
networks:
  bridge:
    driver: bridge
  pgnet:
    external: false